{% if dependencyContainers %}
/// This file is generated by Weaver {{version}}
/// DO NOT EDIT!

{% for moduleName in testableImports %}
@testable import {{moduleName}}
{% endfor %}

{% for moduleName in imports %}
import {{moduleName}}
{% endfor %}{# imports #}
{% endif %}

{% for dependencyContainer in dependencyContainers %}

// MARK: - {{dependencyContainer.targetType.name}}

final class {{dependencyContainer.targetType.name}}ResolverStub: {% if dependencyContainer.doesSupportObjc %}NSObject, {% endif %}{{dependencyContainer.targetType.name}}DependencyResolver {
	
	{% for parameter in dependencyContainer.parameters %}
	var {{parameter.name}}: {{parameter.abstractType}}
	{% endfor %}

	{% for dependency in dependencyContainer.resolverDependencies %}
    var {{dependency.name}}Double = {{dependency.abstractType}}Double()
    {% if not dependency.parameters %}
    var {{dependency.name}}: {{dependency.abstractType}} {
    	return {{dependency.name}}Double
	}
	{% else %}
	private(set) var {{dependency.name}}Invocations = [({% for parameter in dependency.parameters %}{{parameter.name}}: {{parameter.abstractType}}{% if not forloop.last %}, {% endif %}{% endfor %})]
	func {{dependency.name}}({% call ParametersDecl dependency.parameters %}) -> {{dependency.abstractType}} {
		{{dependency.name}}Invocations.append(({% for parameter in dependency.parameters %}{{parameter.name}}{% if not forloop.last %}, {% endif %}{% endfor %}))
		return {{dependency.name}}Double
	}
    {% endif %}
	{% endfor %}

	{% if dependencyContainer.parameters %}
	init({% for parameter in dependencyContainer.parameters %}{{parameter.name}}: {{parameter.abstractType}}{% if not forloop.last  %}, {% endif %}{% endfor %}) {
		{% for parameter in dependencyContainer.parameters %}
		self.{{parameter.name}} = {{parameter.name}}
		{% endfor %}
	}
	{% endif %}
}

{% endfor %}
