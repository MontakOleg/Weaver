import Foundation
import UIKit

/// This file is generated by Weaver 0.12.4
/// DO NOT EDIT!

// MARK: - ImageManager

protocol ImageManagerDependencyResolver: AnyObject {
    var logger: Logger { get }
    var urlSession: URLSession { get }
    var movieAPI: APIProtocol { get }
}

final class ImageManagerDependencyContainer: ImageManagerDependencyResolver, MovieAPIInputDependencyResolver {

    private var _logger: Optional<Logger> = nil
    var logger: Logger {
        if let value: Logger = _logger {
            return value
        }
        let value: Logger = Logger()
        _logger = value
        return value
    }

    private var _urlSession: Optional<URLSession> = nil
    var urlSession: URLSession {
        if let value: URLSession = _urlSession {
            return value
        }
        let value: URLSession = ImageManager.makeURLSession(self)
        _urlSession = value
        return value
    }

    private var _movieAPI: Optional<APIProtocol> = nil
    var movieAPI: APIProtocol {
        if let value: APIProtocol = _movieAPI {
            return value
        }
        let dependencies = MovieAPIDependencyContainer(injecting: self)
        let value: APIProtocol = MovieAPI(injecting: dependencies)
        _movieAPI = value
        return value
    }

    init() {
        _ = logger
        _ = urlSession
        _ = movieAPI
    }
}

public extension ImageManager {

    convenience init() {
        let dependencies = ImageManagerDependencyContainer()
        self.init(injecting: dependencies)
    }
}
