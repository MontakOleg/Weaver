import Foundation

/// This file is generated by Weaver 0.12.4
/// DO NOT EDIT!

// MARK: - MovieManager

protocol MovieManagerInputDependencyResolver: AnyObject {
    var logger: Logger { get }
}

protocol MovieManagerDependencyResolver: AnyObject {
    var host: String { get }
    var logger: Logger { get }
    var urlSession: URLSession { get }
    var movieAPI: APIProtocol { get }
}

final class MovieManagerDependencyContainer: MovieManagerDependencyResolver, MovieAPIInputDependencyResolver {

    let host: String

    let logger: Logger

    private var _urlSession: Optional<URLSession> = nil
    var urlSession: URLSession {
        if let value: URLSession = _urlSession {
            return value
        }
        let value: URLSession = { _ in URLSession.shared }(self)
        _urlSession = value
        return value
    }

    private var _movieAPI: Optional<APIProtocol> = nil
    var movieAPI: APIProtocol {
        if let value: APIProtocol = _movieAPI {
            return value
        }
        let dependencies = MovieAPIDependencyContainer(injecting: self)
        let value: APIProtocol = MovieAPI(injecting: dependencies)
        _movieAPI = value
        return value
    }

    init(injecting dependencies: MovieManagerInputDependencyResolver,
         host: String) {
        self.host = host
        logger = dependencies.logger
        _ = urlSession
        _ = movieAPI
    }
}

final class MovieManagerShimDependencyContainer: MovieManagerInputDependencyResolver {

    let logger: Logger

    init(logger: Logger) { self.logger = logger }
}

public extension MovieManager {

    convenience init(logger: Logger,
                     host: String) {
        let shim = MovieManagerShimDependencyContainer(logger: logger)
        let dependencies = MovieManagerDependencyContainer(injecting: shim, host: host)
        self.init(injecting: dependencies)
    }
}
