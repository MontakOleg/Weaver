import API
import UIKit

/// This file is generated by Weaver 0.12.4
/// DO NOT EDIT!

// MARK: - AppDelegate

protocol AppDelegateDependencyResolver: AnyObject {
    var logger: Logger { get }
    var urlSession: URLSession { get }
    var movieAPI: APIProtocol { get }
    var imageManager: ImageManaging { get }
    var movieManager: MovieManaging { get }
    var homeViewController: UIViewController { get }
    var reviewManager: ReviewManaging { get }
}

final class AppDelegateDependencyContainer: AppDelegateDependencyResolver, HomeViewControllerInputDependencyResolver, ReviewManagerInputDependencyResolver {

    private var _logger: Optional<Logger> = nil
    var logger: Logger {
        if let value: Logger = _logger {
            return value
        }
        let value: Logger = Logger()
        _logger = value
        return value
    }

    private var _urlSession: Optional<URLSession> = nil
    var urlSession: URLSession {
        if let value: URLSession = _urlSession {
            return value
        }
        let value: URLSession = { _ in URLSession.shared }(self)
        _urlSession = value
        return value
    }

    private var _movieAPI: Optional<APIProtocol> = nil
    var movieAPI: APIProtocol {
        if let value: APIProtocol = _movieAPI {
            return value
        }
        let value: APIProtocol = AppDelegate.makeMovieAPI(self)
        _movieAPI = value
        return value
    }

    private var _imageManager: Optional<ImageManaging> = nil
    var imageManager: ImageManaging {
        if let value: ImageManaging = _imageManager {
            return value
        }
        let value: ImageManaging = ImageManager()
        _imageManager = value
        return value
    }

    private var _movieManager: Optional<MovieManaging> = nil
    var movieManager: MovieManaging {
        if let value: MovieManaging = _movieManager {
            return value
        }
        let value: MovieManaging = AppDelegate.makeMovieManager(self)
        _movieManager = value
        return value
    }

    private var _homeViewController: Optional<UIViewController> = nil
    var homeViewController: UIViewController {
        if let value: UIViewController = _homeViewController {
            return value
        }
        let dependencies = HomeViewControllerDependencyContainer(injecting: self)
        let value: UIViewController = HomeViewController(injecting: dependencies)
        _homeViewController = value
        return value
    }

    private var _reviewManager: Optional<ReviewManaging> = nil
    var reviewManager: ReviewManaging {
        if let value: ReviewManaging = _reviewManager {
            return value
        }
        let dependencies = ReviewManagerDependencyContainer(injecting: self)
        let value: ReviewManaging = ReviewManager(injecting: dependencies)
        _reviewManager = value
        return value
    }

    init() {
        _ = logger
        _ = urlSession
        _ = movieAPI
        _ = imageManager
        _ = movieManager
        _ = homeViewController
        _ = reviewManager
    }
}
