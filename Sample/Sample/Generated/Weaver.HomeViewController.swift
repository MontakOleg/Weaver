import API
import Foundation
import UIKit

/// This file is generated by Weaver 0.12.4
/// DO NOT EDIT!

// MARK: - HomeViewController

protocol HomeViewControllerInputDependencyResolver: AnyObject {
    var movieManager: MovieManaging { get }
    var imageManager: ImageManaging { get }
    var reviewManager: ReviewManaging { get }
}

protocol HomeViewControllerDependencyResolver: AnyObject {
    var movieManager: MovieManaging { get }
    var logger: Logger { get }
    func movieController(movieID: UInt, title: String) -> UIViewController
}

final class HomeViewControllerDependencyContainer: HomeViewControllerDependencyResolver, MovieViewControllerInputDependencyResolver {

    let movieManager: MovieManaging

    let imageManager: ImageManaging

    let reviewManager: ReviewManaging

    private var _logger: Optional<Logger> = nil
    var logger: Logger {
        if let value: Logger = _logger {
            return value
        }
        let value: Logger = Logger()
        _logger = value
        return value
    }

    private weak var _movieController: Optional<UIViewController> = nil
    func movieController(movieID: UInt,
                         title: String) -> UIViewController {
        if let value: UIViewController = _movieController {
            return value
        }
        let dependencies = MovieViewControllerDependencyContainer(injecting: self, movieID: movieID, title: title)
        let value: UIViewController = MovieViewController(injecting: dependencies)
        _movieController = value
        return value
    }

    init(injecting dependencies: HomeViewControllerInputDependencyResolver) {
        movieManager = dependencies.movieManager
        imageManager = dependencies.imageManager
        reviewManager = dependencies.reviewManager
        _ = logger
    }
}
