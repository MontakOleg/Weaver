/// This file is generated by Weaver 0.12.4
/// DO NOT EDIT!

// MARK: - FaaTest11

protocol FaaTest11InputDependencyResolver: AnyObject {
    var fuu: FuuTest11 { get }
}

protocol FaaTest11DependencyResolver: AnyObject {
    var fee: FeeTest11 { get }
}

final class FaaTest11DependencyContainer: FaaTest11DependencyResolver, FeeTest11InputDependencyResolver {

    let fuu: FuuTest11

    var fee: FeeTest11 {
        let dependencies = FeeTest11DependencyContainer(injecting: self)
        let value: FeeTest11 = FeeTest11(injecting: dependencies)
        return value
    }

    init(injecting dependencies: FaaTest11InputDependencyResolver) { fuu = dependencies.fuu }
}

// MARK: - FeeTest11

protocol FeeTest11InputDependencyResolver: AnyObject {
    var fuu: FuuTest11 { get }
}

protocol FeeTest11DependencyResolver: AnyObject {
    var fii: FiiTest11 { get }
}

final class FeeTest11DependencyContainer: FeeTest11DependencyResolver, FiiTest11InputDependencyResolver {

    let fuu: FuuTest11

    var fii: FiiTest11 {
        let dependencies = FiiTest11DependencyContainer(injecting: self)
        let value: FiiTest11 = FiiTest11(injecting: dependencies)
        return value
    }

    init(injecting dependencies: FeeTest11InputDependencyResolver) { fuu = dependencies.fuu }
}

// MARK: - FiiTest11

protocol FiiTest11InputDependencyResolver: AnyObject {
    var fuu: FuuTest11 { get }
}

protocol FiiTest11DependencyResolver: AnyObject {
    var fuu: FuuTest11 { get }
}

final class FiiTest11DependencyContainer: FiiTest11DependencyResolver {

    let fuu: FuuTest11

    init(injecting dependencies: FiiTest11InputDependencyResolver) { fuu = dependencies.fuu }
}

// MARK: - FooTest11

protocol FooTest11DependencyResolver: AnyObject {
    var fuu: FuuTest11 { get }
    var faa: FaaTest11 { get }
}

final class FooTest11DependencyContainer: FooTest11DependencyResolver, FaaTest11InputDependencyResolver {

    private var _fuu: Optional<FuuTest11> = nil
    var fuu: FuuTest11 {
        if let value: FuuTest11 = _fuu {
            return value
        }
        let value: FuuTest11 = FuuTest11()
        _fuu = value
        return value
    }

    private var _faa: Optional<FaaTest11> = nil
    var faa: FaaTest11 {
        if let value: FaaTest11 = _faa {
            return value
        }
        let dependencies = FaaTest11DependencyContainer(injecting: self)
        let value: FaaTest11 = FaaTest11(injecting: dependencies)
        _faa = value
        return value
    }

    init() {
        _ = fuu
        _ = faa
    }
}

